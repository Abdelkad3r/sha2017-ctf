#!/usr/bin/env python
#SHA2017 CTF | Cryptography [Secure Login - 200 pts]
#@Abdelkader
#@7feilee
#@pakim

import gmpy

# Translate a number to a string (byte array), for example 5678 = 0x162e = \x16\x2e
def num2str(n):
   d = ('%x' % n)
   if len(d) % 2 == 1:
       d = '0' + d
   return d.decode('hex')

# Translate byte array back to number \x16\x2e = 0x162e = 5678
def str2num(s):
   return int(s.encode('hex'),16)
sign = "ticket:admin|root|"
# num_sign = sign.encode("hex")
# print num_sign
# print hex(int(num_sign,16)*pow(2,8))
# for i in

n = 25504352309535290475248970674346405639150033303276037621954645287836414954584485104061261800020387562499019659311665606506084209652278825297538342995446093360707480284955051977871508969158833725741319229528482243960926606982225623875037437446029764584076579733157399563314682454896733000474399703682370015847387660034753890964070709371374885394037462378877025773834640334396506494513394772275132449199231593014288079343099475952658539203870198753180108893634430428519877349292223234156296946657199158953622932685066947832834071847602426570899103186305452954512045960946081356967938725965154991111592790767330692701669
found = 0

y =  str2num('ticket:admin|root|' + '\x20' * 4 ) % n

for i in range(0, 250000):
    if num2str(y * gmpy.invert(0xff*0x100000000 + i, n ) % n)[0] == '\xff':
        print 'Found!'
        a, b = 0xff*0x100000000 + i, y * gmpy.invert(0xff*0x100000000 + i, n ) % n
        break

print hex(a)
print hex(b)

a = 0x0de6902368c1f973c387d1e7c8b54845e72ef1fe48f6c01897b548080768a330c20aaf1b6a1ec0cb9fb0045da87cd65ce5573e8de8d76cf4124a6bc999660c4b90b277ffbbb19195ef8ec1cacd068aa93ce9de396493636407aaaf7d8eb554c84688032d24ae742a93dbbc989189c2f2812816c737ea2b5fa7dac0c03049fef426ff2abe84e26f265c778d35c51a2ffd576b4dd71dcc32bd3ab01aa5f01290f1c9a0b2f466f5dfdeb288292337b56fda92f970fb3ddd4fd7f4257c2ce03dbd7ab8e1613eb275820c49a4afdee597b8a41902c9afe4ed218d4949cd5f04445de02342e35a08dc8b7bea4993b693f669f832bc0026726304b24589876a110a555a
b = 0xc4809a74f734dce6c80205c93932c9bd972d4812fb3d58ad524b343c1663bffa558b6c609fd4aa57dd07093790edffd2f7c9e54599f5bae3c1007679080bbe0be867e94c38cd7f3c8a21076f29059a3e08b19444b30c55beb2f0ec24521c69f2e694987b7db01156504c3208ae14ace8c27fa9290b40b1a12f5a46c4d63c0f07b550ab7d32db3cc755be40b388b5d58ea1baddf13de10d169d96d860ecdf4300e76fb9356be2722964c027de2ff81ea071fbe38644d71906b95e651691cc39d7bf9c25bd56f1ec71562b609bd3f8ede396dc68445fbfb5567e9ce3afd902946835a5f3820b33518222c081e49825575391535b1e6ca859134eca28d06bce3c56

print hex((a*b)%n)
